/*******************************************************************************
 * DOSSIER-ETUDIANT
 * Copyright UNIVERSITE DE TECHNOLOGIE DE TROYES - CEDRE (www.utt.fr), since 1993 
 * This software is governed by the CeCILL license under French law and abiding by the
 * rules of distribution of free software. You can use, modify and/or 
 * redistribute the software under the terms of the CeCILL license as 
 * circulated by CEA, CNRS and INRIA at the following URL 
 * "http://www.cecill.info". 
 * As a counterpart to the access to the source code and rights to copy, modify 
 * and redistribute granted by the license, users are provided only with a 
 * limited warranty and the software's author, the holder of the economic 
 * rights, and the successive licensors have only limited liability. In this 
 * respect, the user's attention is drawn to the risks associated with loading,
 * using, modifying and/or developing or reproducing the software by the user 
 * in light of its specific status of free software, that may mean that it
 * is complicated to manipulate, and that also therefore means that it is 
 * reserved for developers and experienced professionals having in-depth
 * computer knowledge. Users are therefore encouraged to load and test the 
 * software's suitability as regards their requirements in conditions enabling
 * the security of their systems and/or data to be ensured and, more generally, 
 * to use and operate it in the same conditions as regards security. The
 * fact that you are presently reading this means that you have had knowledge 
 * of the CeCILL license and that you accept its terms.
 * 
 * Do not remove this copyright message
 ******************************************************************************/
// Generated by the WOLips Templateengine Plug-in at 23 mars 2011 09:02:59
package etudiants.utt.fr.server;

import org.login.fwkloginwebapp.common.LoginLog;
import org.login.fwkloginwebapp.common.util.StringCtrl;
import org.login.fwkloginwebapp.server.LoginWebAction;
import org.login.fwkloginwebapp.server.components.LgnLogin;
import org.login.fwkloginwebapp.server.components.LgnLoginResponder;
import org.login.fwkloginwebapp.server.components.LoginAlertPage;

import com.sun.tools.apt.main.Main;
import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WOApplication;
import com.webobjects.appserver.WOComponent;
import com.webobjects.appserver.WORequest;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableDictionary;

import er.extensions.crypting.ERXCrypto;
import etudiants.utt.fr.components.LoginCAS;
import etudiants.utt.fr.components.LoginLocal;
import etudiants.utt.fr.components.OnTimeOut;
import etudiants.utt.fr.components.ProfilEtudiants;
import etudiants.utt.fr.components.Recherche;
import etudiants.utt.fr.eo.EOIndividu;
import etudiants.utt.fr.roles.LeUser;
import etudiants.utt.fr.server.process.ProcessGestionRechercheEtudiants;
import etudiants.utt.fr.util.PwdDecrypter;

/**
 * @author Raymond NANEON <raymond.naneon at utt.fr>
 * 
 */

@SuppressWarnings("all")
public class DirectAction extends LoginWebAction {

	private String loginComment;
	private static String TYPE_ETUDIANTS = "ProfilEtudiants";
	private static String TYPE_NORMAL = "Recherche";
	private static boolean PAGE_ETUDIANT = false;
	public static ProcessGestionRechercheEtudiants gestEtu;
	public static EOEditingContext myContext;
	private final static String DA_ENCRYPT_PWD_KEY = "Passwd";
	public static String HOSTNAME = "";
	public Session session = (Session) session();

	// public Session session = (Session) session();

	public DirectAction(WORequest request) {
		super(request);
		myContext = DossierEtuSession().defaultEditingContext();
	}

	public Session DossierEtuSession() {
		return session;
	}

	public Application dossierEtuApp() {
		return (Application) WOApplication.application();
	}

	/**
	 * Execute l'action par defaut de l'application Dossier_etudiant(Login sur
	 * le CAS)
	 */
	public WOActionResults myDefaultAction() {
		if (useCasService())
			return loginCASPage();
		else
			return loginNoCasPage(null);
	}

	public WOActionResults defaultAction() {
		return pageWithName("Main");
	}

	public WOActionResults loginCasSuccessPage(String s) {
		return loginCasSuccessPage(s, null);
	}

	public WOActionResults sessionExpiredAction() {
		OnTimeOut nextPage = (OnTimeOut) pageWithName(OnTimeOut.class.getName());
		return nextPage;
	}

	public WOActionResults applicationExceptionAction() {
		Recherche nextPage = (Recherche) pageWithName(Recherche.class.getName());
		nextPage.setIsOpenFenetreException(true);
		return nextPage;
	}
	
	/**Cryptage de mot de passe en Cipher **/
	public WOActionResults encryptionAction() {
		HOSTNAME = dossierEtuApp().reportServer();
		String passwd = (String) request().formValueForKey(DA_ENCRYPT_PWD_KEY);
		PwdDecrypter encrypter = null;
		if (!StringCtrl.isEmpty(passwd)) {
			String crypter = HOSTNAME;
			if (!StringCtrl.isEmpty(crypter)) {
				encrypter = new PwdDecrypter(crypter);
				String encrypted = encrypter.encrypt(passwd);
				String str = "le cryptage de '" + passwd + "' donne '" + encrypted
						+ "'";
				LoginLog.log(str); 
			}
		}
		if (useCasService())
			return loginCASPage();
		else
			return loginNoCasPage(null);
	}

	@Override
	public WOActionResults loginCasSuccessPage(String netid,
			NSDictionary actionParams) {
		WOActionResults nextPage = null;
		String errorMsg = DossierEtuSession().setConnectedUser(netid);
		// Session session = (Session) session();
		try {
			if (errorMsg == null) {
				NSArray utilisateurs = EOUtilities.objectsMatchingKeyAndValue(
						myContext, EOIndividu.ENTITY_NAME, "indivId",
						DossierEtuSession().connectedUserInfo().noCompte());
				if (utilisateurs != null && utilisateurs.count() == 1) {
					EOIndividu utilisateur = (EOIndividu) utilisateurs
							.lastObject();
					DossierEtuSession().setUtilisateur(utilisateur);
					DossierEtuSession().setNewUser(new LeUser());
					DossierEtuSession().setUtilisateurAvecDroit(
							DossierEtuSession().getNewUser().Autorization(
									DossierEtuSession(), utilisateur));
					if (DossierEtuSession().getNewUser().leUser()
							.valueForKey("role").equals("etudiant")) {
						// LoginLog.log("login : " + netid + ", type : " +
						// TYPE_ETUDIANTS
						// + "- OK");
						PAGE_ETUDIANT = true;
						DossierEtuSession().setEtudiant(utilisateur);
					} else {
						// LoginLog.log("login : " + netid + ", type : " +
						// TYPE_NORMAL
						// + "- OK");
						PAGE_ETUDIANT = false;
					}
					// nextPage = (Recherche) pageWithName(TYPE_NORMAL);
					nextPage = this.getDestPage(DossierEtuSession(),
							actionParams);
				} else {
					nextPage = loginCasFailurePage(errorMsg, null);
				}
			} else {
				nextPage = loginCasFailurePage(errorMsg, null);
			}
			return nextPage;
		} catch (Exception e) {
			return null;
		}
	}

	public WOActionResults loginCasFailurePage(String errorMessage,
			String errorCode) {
		StringBuffer msg = new StringBuffer();
		msg.append("Une erreur s'est produite lors de l'authentification de l'utilisateur");
		if (errorMessage != null)
			msg.append("&nbsp;:<br><br>").append(errorMessage);
		LoginLog.log(" user login - Erreur : ", errorMessage);
		return getErrorPage(msg.toString());
	}

	public WOActionResults loginNoCasPage() {
		return loginNoCasPage(null);
	}

	public WOActionResults mailUsersAction() {
		String destinataire = lgnApp.config().stringForKey("APP_ADMIN_MAIL");
		WORequest req = request();
		if (req.formValueForKey("dest") != null) {
			destinataire = (String) req.formValueForKey("dest");
		}
		lgnApp.mailBus().sendMail(
				destinataire,
				lgnApp.config().stringForKey("APP_ADMIN_MAIL"),
				null,
				"[" + lgnApp.name()
						+ "]Utilisateurs connectés à l'application ",
				"Liste des emails : \n"
						+ ((Application) WOApplication.application())
								.utilisateurs().componentsJoinedByString(","));
		return defaultAction();
	}

	@SuppressWarnings("rawtypes")
	public WOActionResults loginNoCasPage(NSDictionary actionParams) {
		LoginLocal page = (LoginLocal) pageWithName(LoginLocal.class.getName());
		page.setTitleComment(loginComment());
		page.registerLoginResponder(getNewLoginResponder(actionParams));
		return page;
	}

	public WOActionResults loginCASPage() {
		LoginCAS page = (LoginCAS) pageWithName(LoginCAS.class.getName());
		page.setTitleComment(loginComment());
		page.setCASLoginLink(casLoginLink());
		return page;
	}

	/**
	  *
	   */
	public WOComponent getErrorPage(String errorMessage) {
		LoginAlertPage page = (LoginAlertPage) lgnApp.pageWithName(
				LoginAlertPage.class.getName(), context());
		page.showMessage(null, lgnApp.name() + " : ERREUR", errorMessage, null,
				null, null, LoginAlertPage.ERROR, null);
		return page;
	}

	public String casLoginLink() {
		// TODO Auto-generated method stub
		return null;
	}

	@SuppressWarnings("rawtypes")
	public LgnLoginResponder getNewLoginResponder(NSDictionary actionParams) {
		return new DefaultLoginResponder(actionParams);
	}

	/**
	 * @return the loginComment
	 */
	public String loginComment() {
		return loginComment;
	}

	/**
	 * @param loginComment
	 *            the loginComment to set
	 */
	public void setLoginComment(String loginComment) {
		this.loginComment = loginComment;
	}

	public class DefaultLoginResponder implements LgnLoginResponder {
		@SuppressWarnings("rawtypes")
		private NSDictionary actionParams;

		@SuppressWarnings("rawtypes")
		public DefaultLoginResponder(NSDictionary actionParams) {
			this.actionParams = actionParams;
		}

		@SuppressWarnings("rawtypes")
		public NSDictionary actionParams() {
			return actionParams;
		}

		@SuppressWarnings("rawtypes")
		public WOComponent loginAccepted(LgnLogin loginComponent) {
			DossierEtuSession().setConnectedUserInfo(
					loginComponent.loggedUserInfo());
			String erreur = DossierEtuSession().setConnectedUser(
					loginComponent.loggedUserInfo().login());
			try {
				if (erreur != null) {
					LoginLog.log("CONNEXION IMPOSSIBLE : " + erreur);
					return getErrorPage(erreur);
				} else {
					NSArray utilisateurs = EOUtilities
							.objectsMatchingKeyAndValue(myContext,
									EOIndividu.ENTITY_NAME, "indivId",
									DossierEtuSession().connectedUserInfo()
											.noCompte());
					if (utilisateurs != null && utilisateurs.count() == 1) {
						EOIndividu utilisateur = (EOIndividu) utilisateurs
								.lastObject();
						DossierEtuSession().setNewUser(new LeUser());
						DossierEtuSession().setUtilisateurAvecDroit(
								DossierEtuSession().getNewUser().Autorization(
										DossierEtuSession(), utilisateur));
						if (DossierEtuSession().utilisateurAvecDroit) {
							LoginLog.log("user login : "
									+ loginComponent.loggedUserInfo().login()
									+ " - OK");
							DossierEtuSession().setUtilisateur(utilisateur);
						} else {
							return getErrorPage("Vous n'&ecirc;tes plus autoris&eacute; &agrave; utiliser cette application.");
						}
					} else {
						return getErrorPage("Vous n'&ecirc;tes pas autoris&eacute; &agrave; utiliser cette application.");
					}
				}
				// return loginResponder.loginAccepted(null);
				return getDestPage(DossierEtuSession(), actionParams);
			} catch (Exception e) {
				return null;
			}
		}

		public boolean acceptLoginName(String loginName) {
			return lgnApp.acceptLoginName(loginName);
		}

		public boolean acceptEmptyPassword() {
			return lgnApp.config().booleanForKey("ACCEPT_EMPTY_PASSWORD");
		}

		public String getRootPassword() {
			return lgnApp.getRootPassword();
		}
	}

	public WOComponent getDestPage(Session session, NSDictionary actionParams) {
		try {
			gestEtu = new ProcessGestionRechercheEtudiants();
			session.setPeriodeCourante((NSMutableDictionary) gestEtu
					.selectRawRowPeriodeCourante(myContext).objectAtIndex(0));
			WOComponent nextPage = null;
			if (PAGE_ETUDIANT) {
				LoginLog.log("login : " + session.connectedUserInfo().login()
						+ ", type : " + TYPE_ETUDIANTS + " - OK");
				nextPage = (ProfilEtudiants) lgnApp.pageWithName(
						TYPE_ETUDIANTS, session.context());
			} else {
				LoginLog.log("login : " + session.connectedUserInfo().login()
						+ ", type : " + TYPE_NORMAL + " - OK");
				nextPage = (Recherche) lgnApp.pageWithName(TYPE_NORMAL,
						session.context());
			}
			return nextPage;
		} catch (Exception e) {
			return null;
		}
	}
}
