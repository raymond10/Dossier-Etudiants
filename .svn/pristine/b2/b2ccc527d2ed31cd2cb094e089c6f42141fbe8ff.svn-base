// DO NOT EDIT.  Make changes to EOUv.java instead.
package gestionuv.utt.fr.eo;

import com.webobjects.eoaccess.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;
import java.math.*;
import java.util.*;
import org.apache.log4j.Logger;

import er.extensions.eof.*;
import er.extensions.foundation.*;

@SuppressWarnings("all")
public abstract class _EOUv extends  ERXGenericRecord {
  public static final String ENTITY_NAME = "EOUv";

  // Attribute Keys
  public static final ERXKey<Long> CATEG_ID_CREA = new ERXKey<Long>("categIdCrea");
  public static final ERXKey<NSTimestamp> CRE_DATE = new ERXKey<NSTimestamp>("creDate");
  public static final ERXKey<Double> CREDIT_CREA = new ERXKey<Double>("creditCrea");
  public static final ERXKey<String> DIPLOME_CREAC = new ERXKey<String>("diplomeCreac");
  public static final ERXKey<String> DIPL_OPT_CREAC = new ERXKey<String>("diplOptCreac");
  public static final ERXKey<String> DIPL_SPEC_CREAC = new ERXKey<String>("diplSpecCreac");
  public static final ERXKey<String> FICTIVEF = new ERXKey<String>("fictivef");
  public static final ERXKey<String> GESTIONC = new ERXKey<String>("gestionc");
  public static final ERXKey<String> MAJ_AUTEUR = new ERXKey<String>("majAuteur");
  public static final ERXKey<String> MODALITEF = new ERXKey<String>("modalitef");
  public static final ERXKey<NSTimestamp> MODIF_DATE = new ERXKey<NSTimestamp>("modifDate");
  public static final ERXKey<String> TITRE_CREA = new ERXKey<String>("titreCrea");
  public static final ERXKey<String> UVC = new ERXKey<String>("uvc");
  // Relationship Keys
  public static final ERXKey<gestionuv.utt.fr.eo.EOUvOuv> UV_OUVS = new ERXKey<gestionuv.utt.fr.eo.EOUvOuv>("uvOuvs");

  // Attributes
  public static final String CATEG_ID_CREA_KEY = CATEG_ID_CREA.key();
  public static final String CRE_DATE_KEY = CRE_DATE.key();
  public static final String CREDIT_CREA_KEY = CREDIT_CREA.key();
  public static final String DIPLOME_CREAC_KEY = DIPLOME_CREAC.key();
  public static final String DIPL_OPT_CREAC_KEY = DIPL_OPT_CREAC.key();
  public static final String DIPL_SPEC_CREAC_KEY = DIPL_SPEC_CREAC.key();
  public static final String FICTIVEF_KEY = FICTIVEF.key();
  public static final String GESTIONC_KEY = GESTIONC.key();
  public static final String MAJ_AUTEUR_KEY = MAJ_AUTEUR.key();
  public static final String MODALITEF_KEY = MODALITEF.key();
  public static final String MODIF_DATE_KEY = MODIF_DATE.key();
  public static final String TITRE_CREA_KEY = TITRE_CREA.key();
  public static final String UVC_KEY = UVC.key();
  // Relationships
  public static final String UV_OUVS_KEY = UV_OUVS.key();

  private static Logger LOG = Logger.getLogger(_EOUv.class);

  public EOUv localInstanceIn(EOEditingContext editingContext) {
    EOUv localInstance = (EOUv)EOUtilities.localInstanceOfObject(editingContext, this);
    if (localInstance == null) {
      throw new IllegalStateException("You attempted to localInstance " + this + ", which has not yet committed.");
    }
    return localInstance;
  }

  public Long categIdCrea() {
    return (Long) storedValueForKey(_EOUv.CATEG_ID_CREA_KEY);
  }

  public void setCategIdCrea(Long value) {
    if (_EOUv.LOG.isDebugEnabled()) {
    	_EOUv.LOG.debug( "updating categIdCrea from " + categIdCrea() + " to " + value);
    }
    takeStoredValueForKey(value, _EOUv.CATEG_ID_CREA_KEY);
  }

  public NSTimestamp creDate() {
    return (NSTimestamp) storedValueForKey(_EOUv.CRE_DATE_KEY);
  }

  public void setCreDate(NSTimestamp value) {
    if (_EOUv.LOG.isDebugEnabled()) {
    	_EOUv.LOG.debug( "updating creDate from " + creDate() + " to " + value);
    }
    takeStoredValueForKey(value, _EOUv.CRE_DATE_KEY);
  }

  public Double creditCrea() {
    return (Double) storedValueForKey(_EOUv.CREDIT_CREA_KEY);
  }

  public void setCreditCrea(Double value) {
    if (_EOUv.LOG.isDebugEnabled()) {
    	_EOUv.LOG.debug( "updating creditCrea from " + creditCrea() + " to " + value);
    }
    takeStoredValueForKey(value, _EOUv.CREDIT_CREA_KEY);
  }

  public String diplomeCreac() {
    return (String) storedValueForKey(_EOUv.DIPLOME_CREAC_KEY);
  }

  public void setDiplomeCreac(String value) {
    if (_EOUv.LOG.isDebugEnabled()) {
    	_EOUv.LOG.debug( "updating diplomeCreac from " + diplomeCreac() + " to " + value);
    }
    takeStoredValueForKey(value, _EOUv.DIPLOME_CREAC_KEY);
  }

  public String diplOptCreac() {
    return (String) storedValueForKey(_EOUv.DIPL_OPT_CREAC_KEY);
  }

  public void setDiplOptCreac(String value) {
    if (_EOUv.LOG.isDebugEnabled()) {
    	_EOUv.LOG.debug( "updating diplOptCreac from " + diplOptCreac() + " to " + value);
    }
    takeStoredValueForKey(value, _EOUv.DIPL_OPT_CREAC_KEY);
  }

  public String diplSpecCreac() {
    return (String) storedValueForKey(_EOUv.DIPL_SPEC_CREAC_KEY);
  }

  public void setDiplSpecCreac(String value) {
    if (_EOUv.LOG.isDebugEnabled()) {
    	_EOUv.LOG.debug( "updating diplSpecCreac from " + diplSpecCreac() + " to " + value);
    }
    takeStoredValueForKey(value, _EOUv.DIPL_SPEC_CREAC_KEY);
  }

  public String fictivef() {
    return (String) storedValueForKey(_EOUv.FICTIVEF_KEY);
  }

  public void setFictivef(String value) {
    if (_EOUv.LOG.isDebugEnabled()) {
    	_EOUv.LOG.debug( "updating fictivef from " + fictivef() + " to " + value);
    }
    takeStoredValueForKey(value, _EOUv.FICTIVEF_KEY);
  }

  public String gestionc() {
    return (String) storedValueForKey(_EOUv.GESTIONC_KEY);
  }

  public void setGestionc(String value) {
    if (_EOUv.LOG.isDebugEnabled()) {
    	_EOUv.LOG.debug( "updating gestionc from " + gestionc() + " to " + value);
    }
    takeStoredValueForKey(value, _EOUv.GESTIONC_KEY);
  }

  public String majAuteur() {
    return (String) storedValueForKey(_EOUv.MAJ_AUTEUR_KEY);
  }

  public void setMajAuteur(String value) {
    if (_EOUv.LOG.isDebugEnabled()) {
    	_EOUv.LOG.debug( "updating majAuteur from " + majAuteur() + " to " + value);
    }
    takeStoredValueForKey(value, _EOUv.MAJ_AUTEUR_KEY);
  }

  public String modalitef() {
    return (String) storedValueForKey(_EOUv.MODALITEF_KEY);
  }

  public void setModalitef(String value) {
    if (_EOUv.LOG.isDebugEnabled()) {
    	_EOUv.LOG.debug( "updating modalitef from " + modalitef() + " to " + value);
    }
    takeStoredValueForKey(value, _EOUv.MODALITEF_KEY);
  }

  public NSTimestamp modifDate() {
    return (NSTimestamp) storedValueForKey(_EOUv.MODIF_DATE_KEY);
  }

  public void setModifDate(NSTimestamp value) {
    if (_EOUv.LOG.isDebugEnabled()) {
    	_EOUv.LOG.debug( "updating modifDate from " + modifDate() + " to " + value);
    }
    takeStoredValueForKey(value, _EOUv.MODIF_DATE_KEY);
  }

  public String titreCrea() {
    return (String) storedValueForKey(_EOUv.TITRE_CREA_KEY);
  }

  public void setTitreCrea(String value) {
    if (_EOUv.LOG.isDebugEnabled()) {
    	_EOUv.LOG.debug( "updating titreCrea from " + titreCrea() + " to " + value);
    }
    takeStoredValueForKey(value, _EOUv.TITRE_CREA_KEY);
  }

  public String uvc() {
    return (String) storedValueForKey(_EOUv.UVC_KEY);
  }

  public void setUvc(String value) {
    if (_EOUv.LOG.isDebugEnabled()) {
    	_EOUv.LOG.debug( "updating uvc from " + uvc() + " to " + value);
    }
    takeStoredValueForKey(value, _EOUv.UVC_KEY);
  }

  public NSArray<gestionuv.utt.fr.eo.EOUvOuv> uvOuvs() {
    return (NSArray<gestionuv.utt.fr.eo.EOUvOuv>)storedValueForKey(_EOUv.UV_OUVS_KEY);
  }

  public NSArray<gestionuv.utt.fr.eo.EOUvOuv> uvOuvs(EOQualifier qualifier) {
    return uvOuvs(qualifier, null, false);
  }

  public NSArray<gestionuv.utt.fr.eo.EOUvOuv> uvOuvs(EOQualifier qualifier, boolean fetch) {
    return uvOuvs(qualifier, null, fetch);
  }

  public NSArray<gestionuv.utt.fr.eo.EOUvOuv> uvOuvs(EOQualifier qualifier, NSArray<EOSortOrdering> sortOrderings, boolean fetch) {
    NSArray<gestionuv.utt.fr.eo.EOUvOuv> results;
    if (fetch) {
      EOQualifier fullQualifier;
      EOQualifier inverseQualifier = new EOKeyValueQualifier(gestionuv.utt.fr.eo.EOUvOuv.UV_KEY, EOQualifier.QualifierOperatorEqual, this);
    	
      if (qualifier == null) {
        fullQualifier = inverseQualifier;
      }
      else {
        NSMutableArray<EOQualifier> qualifiers = new NSMutableArray<EOQualifier>();
        qualifiers.addObject(qualifier);
        qualifiers.addObject(inverseQualifier);
        fullQualifier = new EOAndQualifier(qualifiers);
      }

      results = gestionuv.utt.fr.eo.EOUvOuv.fetchEOUvOuvs(editingContext(), fullQualifier, sortOrderings);
    }
    else {
      results = uvOuvs();
      if (qualifier != null) {
        results = (NSArray<gestionuv.utt.fr.eo.EOUvOuv>)EOQualifier.filteredArrayWithQualifier(results, qualifier);
      }
      if (sortOrderings != null) {
        results = (NSArray<gestionuv.utt.fr.eo.EOUvOuv>)EOSortOrdering.sortedArrayUsingKeyOrderArray(results, sortOrderings);
      }
    }
    return results;
  }
  
  public void addToUvOuvs(gestionuv.utt.fr.eo.EOUvOuv object) {
    includeObjectIntoPropertyWithKey(object, _EOUv.UV_OUVS_KEY);
  }

  public void removeFromUvOuvs(gestionuv.utt.fr.eo.EOUvOuv object) {
    excludeObjectFromPropertyWithKey(object, _EOUv.UV_OUVS_KEY);
  }

  public void addToUvOuvsRelationship(gestionuv.utt.fr.eo.EOUvOuv object) {
    if (_EOUv.LOG.isDebugEnabled()) {
      _EOUv.LOG.debug("adding " + object + " to uvOuvs relationship");
    }
    if (er.extensions.eof.ERXGenericRecord.InverseRelationshipUpdater.updateInverseRelationships()) {
    	addToUvOuvs(object);
    }
    else {
    	addObjectToBothSidesOfRelationshipWithKey(object, _EOUv.UV_OUVS_KEY);
    }
  }

  public void removeFromUvOuvsRelationship(gestionuv.utt.fr.eo.EOUvOuv object) {
    if (_EOUv.LOG.isDebugEnabled()) {
      _EOUv.LOG.debug("removing " + object + " from uvOuvs relationship");
    }
    if (er.extensions.eof.ERXGenericRecord.InverseRelationshipUpdater.updateInverseRelationships()) {
    	removeFromUvOuvs(object);
    }
    else {
    	removeObjectFromBothSidesOfRelationshipWithKey(object, _EOUv.UV_OUVS_KEY);
    }
  }

  public gestionuv.utt.fr.eo.EOUvOuv createUvOuvsRelationship() {
    EOClassDescription eoClassDesc = EOClassDescription.classDescriptionForEntityName( gestionuv.utt.fr.eo.EOUvOuv.ENTITY_NAME );
    EOEnterpriseObject eo = eoClassDesc.createInstanceWithEditingContext(editingContext(), null);
    editingContext().insertObject(eo);
    addObjectToBothSidesOfRelationshipWithKey(eo, _EOUv.UV_OUVS_KEY);
    return (gestionuv.utt.fr.eo.EOUvOuv) eo;
  }

  public void deleteUvOuvsRelationship(gestionuv.utt.fr.eo.EOUvOuv object) {
    removeObjectFromBothSidesOfRelationshipWithKey(object, _EOUv.UV_OUVS_KEY);
    editingContext().deleteObject(object);
  }

  public void deleteAllUvOuvsRelationships() {
    Enumeration<gestionuv.utt.fr.eo.EOUvOuv> objects = uvOuvs().immutableClone().objectEnumerator();
    while (objects.hasMoreElements()) {
      deleteUvOuvsRelationship(objects.nextElement());
    }
  }


  public static EOUv createEOUv(EOEditingContext editingContext, NSTimestamp creDate
, String fictivef
, String gestionc
, String modalitef
, String uvc
) {
    EOUv eo = (EOUv) EOUtilities.createAndInsertInstance(editingContext, _EOUv.ENTITY_NAME);    
		eo.setCreDate(creDate);
		eo.setFictivef(fictivef);
		eo.setGestionc(gestionc);
		eo.setModalitef(modalitef);
		eo.setUvc(uvc);
    return eo;
  }

  public static ERXFetchSpecification<EOUv> fetchSpec() {
    return new ERXFetchSpecification<EOUv>(_EOUv.ENTITY_NAME, null, null, false, true, null);
  }

  public static NSArray<EOUv> fetchAllEOUvs(EOEditingContext editingContext) {
    return _EOUv.fetchAllEOUvs(editingContext, null);
  }

  public static NSArray<EOUv> fetchAllEOUvs(EOEditingContext editingContext, NSArray<EOSortOrdering> sortOrderings) {
    return _EOUv.fetchEOUvs(editingContext, null, sortOrderings);
  }

  public static NSArray<EOUv> fetchEOUvs(EOEditingContext editingContext, EOQualifier qualifier, NSArray<EOSortOrdering> sortOrderings) {
    ERXFetchSpecification<EOUv> fetchSpec = new ERXFetchSpecification<EOUv>(_EOUv.ENTITY_NAME, qualifier, sortOrderings);
    fetchSpec.setIsDeep(true);
    NSArray<EOUv> eoObjects = fetchSpec.fetchObjects(editingContext);
    return eoObjects;
  }

  public static EOUv fetchEOUv(EOEditingContext editingContext, String keyName, Object value) {
    return _EOUv.fetchEOUv(editingContext, new EOKeyValueQualifier(keyName, EOQualifier.QualifierOperatorEqual, value));
  }

  public static EOUv fetchEOUv(EOEditingContext editingContext, EOQualifier qualifier) {
    NSArray<EOUv> eoObjects = _EOUv.fetchEOUvs(editingContext, qualifier, null);
    EOUv eoObject;
    int count = eoObjects.count();
    if (count == 0) {
      eoObject = null;
    }
    else if (count == 1) {
      eoObject = eoObjects.objectAtIndex(0);
    }
    else {
      throw new IllegalStateException("There was more than one EOUv that matched the qualifier '" + qualifier + "'.");
    }
    return eoObject;
  }

  public static EOUv fetchRequiredEOUv(EOEditingContext editingContext, String keyName, Object value) {
    return _EOUv.fetchRequiredEOUv(editingContext, new EOKeyValueQualifier(keyName, EOQualifier.QualifierOperatorEqual, value));
  }

  public static EOUv fetchRequiredEOUv(EOEditingContext editingContext, EOQualifier qualifier) {
    EOUv eoObject = _EOUv.fetchEOUv(editingContext, qualifier);
    if (eoObject == null) {
      throw new NoSuchElementException("There was no EOUv that matched the qualifier '" + qualifier + "'.");
    }
    return eoObject;
  }

  public static EOUv localInstanceIn(EOEditingContext editingContext, EOUv eo) {
    EOUv localInstance = (eo == null) ? null : ERXEOControlUtilities.localInstanceOfObject(editingContext, eo);
    if (localInstance == null && eo != null) {
      throw new IllegalStateException("You attempted to localInstance " + eo + ", which has not yet committed.");
    }
    return localInstance;
  }
}
