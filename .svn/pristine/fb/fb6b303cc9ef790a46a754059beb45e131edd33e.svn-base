/**
 * 
 */
package etudiants.utt.fr.components.controlers;

import com.webobjects.appserver.WOActionResults;
import com.webobjects.appserver.WORequest;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.foundation.NSMutableDictionary;

import etudiants.utt.fr.components.Annonces;
import etudiants.utt.fr.roles.LeUser;
import etudiants.utt.fr.server.Session;
import etudiants.utt.fr.sql.AnnoncesSQL;

/**
 * @author Raymond NANEON <raymond.naneon at utt.fr>
 * 
 */
@SuppressWarnings("all")
public class AnnoncesCtrl extends AComponentCtrl {
	
	public EOEditingContext edc;
	public Annonces wocomponent;
	public Session sess;
	public String selectVisible1 = null, selectVisible2 = null, selectPCB1, selectPCB2;
	private LeUser user = new LeUser();
	public NSMutableDictionary unUser = new NSMutableDictionary();
	public static AnnoncesSQL Sql = new AnnoncesSQL();
	private String message;
	public NSMutableDictionary bdgs = new NSMutableDictionary();
	private Boolean isAutorizedUser;
	private Boolean isAdmin;
	
	public AnnoncesCtrl(Annonces aComponent){
		wocomponent = aComponent;
		edc = wocomponent.edc();
		sess = wocomponent.mySession();
		user = wocomponent.user();
		unUser = user.leUser();
	}
	
	public Boolean isAutorizedUser() {
		isAutorizedUser = (Boolean) unUser.valueForKey("isAutorized");
		return isAutorizedUser;
	}
	
	public Boolean isAdmin() {
		isAdmin = unUser.valueForKey("role").equals("administrateur")&&isAutorizedUser;
		return isAdmin;
	}
	
	@SuppressWarnings("unchecked")
	public void clickRadio() {
		WORequest request = wocomponent.context().request();
		String value = (String) request.formValueForKey("visible");
		if(value.equals("O")){
			selectVisible1 = "O";
			selectVisible2 = null;
			bdgs.put("visible", selectVisible1);
		} else {
			selectVisible1 = null;
			selectVisible2 = "N";
			bdgs.put("visible", selectVisible2);
		}
	}
	
	@SuppressWarnings("unchecked")
	public void clickRadioPcb() {
		WORequest request = wocomponent.context().request();
		String value = (String) request.formValueForKey("pcbf");
		if(value.equals("O")){
			selectPCB1 = "O";
			selectPCB2 = null;
			bdgs.put("pcbf", selectPCB1);
		} else {
			selectPCB1= null;
			selectPCB2 = "N";
			bdgs.put("pcbf", selectPCB2);
		}
	}
	
	public WOActionResults updateMsgAnnonce() {
		/** invocation directe de SQL pour changer la visiblite et le message de l'annonce */
		if(message != null){
			message = message.replace("'", "''");
			bdgs.put("annonce", message);
		}
		String tmpValue = (String) bdgs.valueForKey("visible");
		if(tmpValue == null){
			bdgs.put("visible", wocomponent.getAnnoncePcb().visiblef());
		}
		try{
			EOUtilities.rawRowsForSQL(edc, "EtudiantEoGestUV",Sql.constructionUpdateMsgVisibilite(edc, false, bdgs), null);
			EOUtilities.rawRowsForSQL(edc, "EtudiantEoGestUV","COMMIT" , null);	
			wocomponent.funcAnoncePcb();
		} catch (Exception e){
			e.printStackTrace();
		}
		return null;
	}
	
	public WOActionResults updatePcbf() {
		/** invocation directe de SQL pour changer la visiblite du paiement par CB */
		String tmpValue = (String) bdgs.valueForKey("pcbf");
		if(tmpValue == null){
			bdgs.put("pcbf", wocomponent.getAnnoncePcb().pcbf());
		}
		try{
			EOUtilities.rawRowsForSQL(edc, "EtudiantEoGestUV",Sql.constructionUpdatePcbVisible(edc, false, bdgs), null);
			EOUtilities.rawRowsForSQL(edc, "EtudiantEoGestUV","COMMIT" , null);	
			wocomponent.funcAnoncePcb();
		} catch (Exception e){
			e.printStackTrace();
		}
		return null;
	}
	
	/**
	 * @return the message
	 */
	public String getMessage() {
		return message;
	}

	/**
	 * @param message
	 *            the message to set
	 */
	public void setMessage(String message) {
		this.message = message;
	}

}
