/**
 * 
 */
package etudiants.utt.fr.components.controlers;

import com.webobjects.appserver.WODisplayGroup;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSKeyValueCoding;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSMutableDictionary;

import etudiants.utt.fr.components.profilPrint;
import etudiants.utt.fr.roles.LeUser;
import etudiants.utt.fr.server.Session;
import etudiants.utt.fr.server.exception.FactoryException;
import etudiants.utt.fr.server.process.ProcessGestionCategorie;
import etudiants.utt.fr.server.process.ProcessGestionDiplome;
import etudiants.utt.fr.server.process.ProcessGestionEtudiant;
import etudiants.utt.fr.server.process.ProcessGestionInsUv;
import etudiants.utt.fr.server.process.ProcessGestionParcours;
import etudiants.utt.fr.server.process.ProcessGestionTotal;
import etudiants.utt.fr.server.process.ProcessGestionTotaux;
import etudiants.utt.fr.util.StringOperation;

/**
 * @author Raymond NANEON <raymond.naneon at utt.fr>
 * 
 */
@SuppressWarnings("all")
public class profilPrintCtrl extends AComponentCtrl {
	
	private EOEditingContext edc;
	private profilPrint wocomponent;
	private Session sess;
	private LeUser user;
	private NSMutableDictionary unUser;
	private Boolean isAutorizedUser;
	private Boolean isAdmin;
	private WODisplayGroup dg = new WODisplayGroup();
	private NSDictionary bdgs = new NSDictionary();
	
	public profilPrintCtrl(profilPrint aComponent) {
		// TODO Auto-generated constructor stub
		setWocomponent(aComponent);
		setDg(wocomponent().getEtudiantActif());
		setUser(wocomponent().user());
		setUnUser(user().leUser());
		//NSMutableDictionary bindinds = new NSMutableDictionary();
	}
	
	/**
	 * @return the edc
	 */
	public EOEditingContext edc() {
		if(edc == null)
			edc = wocomponent().edc();
		return edc;
	}

	/**
	 * @param edc the edc to set
	 */
	public void setEdc(EOEditingContext edc) {
		this.edc = edc;
	}

	/**
	 * @return the wocomponent
	 */
	public profilPrint wocomponent() {
		return wocomponent;
	}

	/**
	 * @param wocomponent the wocomponent to set
	 */
	public void setWocomponent(profilPrint wocomponent) {
		this.wocomponent = wocomponent;
	}

	/**
	 * @return the sess
	 */
	public Session sess() {
		if(sess == null)
			sess = wocomponent().mySession();
		return sess;
	}

	/**
	 * @param sess the sess to set
	 */
	public void setSess(Session sess) {
		this.sess = sess;
	}

	/**
	 * @return the user
	 */
	public LeUser user() {
		if(user == null)
			user = wocomponent().user();
		return user;
	}

	/**
	 * @param user the user to set
	 */
	public void setUser(LeUser user) {
		this.user = user;
	}

	/**
	 * @return the unUser
	 */
	public NSMutableDictionary unUser() {
		if(unUser == null)
			unUser = user().leUser();
		return unUser;
	}

	/**
	 * @param unUser the unUser to set
	 */
	public void setUnUser(NSMutableDictionary unUser) {
		this.unUser = unUser;
	}

	/**
	 * @return the dg
	 */
	public WODisplayGroup dg() {
		if(dg == null)
			dg = new WODisplayGroup();
		return dg;
	}

	/**
	 * @param dg the dg to set
	 */
	public void setDg(WODisplayGroup dg) {
		this.dg = dg;
	}

	/**
	 * @return the bdgs
	 */
	public NSDictionary bdgs() {
		if(bdgs == null)
			bdgs = new NSDictionary();
		return bdgs;
	}

	/**
	 * @param bdgs the bdgs to set
	 */
	public void setBdgs(NSDictionary bdgs) {
		this.bdgs = bdgs;
	}

	public Boolean isAutorizedUser() {
		isAutorizedUser = (Boolean) unUser().valueForKey(StringOperation.AUTORIZED);
		return isAutorizedUser;
	}
	
	public Boolean isAdmin() {
		isAdmin = unUser().valueForKey(StringOperation.ROLE).equals(StringOperation.ADMINISTRATEUR)&&isAutorizedUser();
		return isAdmin;
	}
	
	public String pdfName(){
		String pdf = "PV-";
		pdf += sess().getUtilisateur().login()+"-";
		return pdf;
	}
	
	//Display profil pdf
	public void letudiant(){
		if (dg().allObjects().isEmpty()) {
			dg().setObjectArray(new NSArray(sess().getEtudiant()));
			dg().queryBindings().setObjectForKey(sess().getEtudiant().primaryKey(),"numero");
		}
		setBdgs(dg().queryBindings());
		try {
			NSMutableDictionary etuDico = new NSMutableDictionary();
		etuDico = (NSMutableDictionary) ProcessGestionEtudiant.selectRawRowEtudiants(edc(), bdgs()).lastObject();
		reWriteDico(etuDico);
		wocomponent().setDicEtudiant(etuDico);
		} catch (FactoryException e) {
			String alertMessage = e.getMessageFormatte();
			if (e.isBloquant()) {
				if (e.isInformatif()) {
					// Exception contenant un message d'information pour
					// l'utilisateur
					sess().addSimpleErrorMessage(
							"message d'information pour l'utilisateur",
							alertMessage);
					sess().setMessageErreur(alertMessage);
				} else {
					e.printStackTrace();
					throw e;
				}
			} else {
				sess().addSimpleErrorMessage("FactoryException ",
						alertMessage);
				sess().setMessageErreur(alertMessage);
			}

		} catch (RuntimeException e1) {
			sess().addSimpleErrorMessage("RuntimeException ",
					e1.getMessage());
			sess().setMessageErreur(e1.getMessage());
			e1.printStackTrace();
			throw e1;
		}
	}
	
	public void leDiplome(){
		if (dg().allObjects().isEmpty()) {
			dg().setObjectArray(new NSArray(sess().getEtudiant()));
			dg().queryBindings().setObjectForKey(sess().getEtudiant().primaryKey(),"numero");
		}
		setBdgs(dg().queryBindings());
		try {
			NSMutableArray diplList = new NSMutableArray();
			diplList = reWriteListDico(ProcessGestionDiplome.selectRawRowDiplome(edc(), bdgs()));
		wocomponent().setListDiplome(diplList.immutableClone());
		} catch (FactoryException e) {
			String alertMessage = e.getMessageFormatte();
			if (e.isBloquant()) {
				if (e.isInformatif()) {
					// Exception contenant un message d'information pour
					// l'utilisateur
					sess().addSimpleErrorMessage(
							"message d'information pour l'utilisateur",
							alertMessage);
					sess().setMessageErreur(alertMessage);
				} else {
					e.printStackTrace();
					throw e;
				}
			} else {
				sess().addSimpleErrorMessage("FactoryException ",
						alertMessage);
				sess().setMessageErreur(alertMessage);
			}

		} catch (RuntimeException e1) {
			sess().addSimpleErrorMessage("RuntimeException ",
					e1.getMessage());
			sess().setMessageErreur(e1.getMessage());
			e1.printStackTrace();
			throw e1;
		}
	}
	
	public void laCategorie(){
		setDg(wocomponent().getEtudiantActif());
		if (dg().allObjects().isEmpty()) {
			dg().setObjectArray(new NSArray(sess().getEtudiant()));
			dg().queryBindings().setObjectForKey(sess().getEtudiant().primaryKey(),"numero");
		}
		setBdgs(dg().queryBindings());
		try {
			NSMutableArray categList = new NSMutableArray();
			categList = reWriteListDico(ProcessGestionCategorie.selectRawCategorie(edc(), bdgs()));
		wocomponent().setListCategory(categList.immutableClone());
		} catch (FactoryException e) {
			String alertMessage = e.getMessageFormatte();
			if (e.isBloquant()) {
				if (e.isInformatif()) {
					// Exception contenant un message d'information pour
					// l'utilisateur
					sess().addSimpleErrorMessage(
							"message d'information pour l'utilisateur",
							alertMessage);
					sess().setMessageErreur(alertMessage);
				} else {
					e.printStackTrace();
					throw e;
				}
			} else {
				sess().addSimpleErrorMessage("FactoryException ",
						alertMessage);
				sess().setMessageErreur(alertMessage);
			}

		} catch (RuntimeException e1) {
			sess().addSimpleErrorMessage("RuntimeException ",
					e1.getMessage());
			sess().setMessageErreur(e1.getMessage());
			e1.printStackTrace();
			throw e1;
		}
	}
	
	public void lUV(){
		setDg(wocomponent().getEtudiantActif());
		if (dg().allObjects().isEmpty()) {
			dg().setObjectArray(new NSArray(sess().getEtudiant()));
			dg().queryBindings().setObjectForKey(sess().getEtudiant().primaryKey(),"numero");
		}
		setBdgs(dg().queryBindings());
		try {
			NSMutableArray uvList = new NSMutableArray();
			uvList = reWriteListDico(ProcessGestionInsUv.selectRawRowUV(edc(), bdgs()));
		wocomponent().setListInsUv(uvList.immutableClone());
		} catch (FactoryException e) {
			String alertMessage = e.getMessageFormatte();
			if (e.isBloquant()) {
				if (e.isInformatif()) {
					// Exception contenant un message d'information pour
					// l'utilisateur
					sess().addSimpleErrorMessage(
							"message d'information pour l'utilisateur",
							alertMessage);
					sess().setMessageErreur(alertMessage);
				} else {
					e.printStackTrace();
					throw e;
				}
			} else {
				sess().addSimpleErrorMessage("FactoryException ",
						alertMessage);
				sess().setMessageErreur(alertMessage);
			}

		} catch (RuntimeException e1) {
			sess().addSimpleErrorMessage("RuntimeException ",
					e1.getMessage());
			sess().setMessageErreur(e1.getMessage());
			e1.printStackTrace();
			throw e1;
		}
	}
	
	public void leParcours(){
		setDg(wocomponent().getEtudiantActif());
		if (dg().allObjects().isEmpty()) {
			dg().setObjectArray(new NSArray(sess().getEtudiant()));
			dg().queryBindings().setObjectForKey(sess().getEtudiant().primaryKey(),"numero");
		}
		setBdgs(dg().queryBindings());
		try {
			NSMutableArray parcList = new NSMutableArray();
			parcList = reWriteListDico(ProcessGestionParcours.selectRawRowParcours(edc(), bdgs()));
		wocomponent().setListParcours(parcList.immutableClone());
		} catch (FactoryException e) {
			String alertMessage = e.getMessageFormatte();
			if (e.isBloquant()) {
				if (e.isInformatif()) {
					// Exception contenant un message d'information pour
					// l'utilisateur
					sess().addSimpleErrorMessage(
							"message d'information pour l'utilisateur",
							alertMessage);
					sess().setMessageErreur(alertMessage);
				} else {
					e.printStackTrace();
					throw e;
				}
			} else {
				sess().addSimpleErrorMessage("FactoryException ",
						alertMessage);
				sess().setMessageErreur(alertMessage);
			}

		} catch (RuntimeException e1) {
			sess().addSimpleErrorMessage("RuntimeException ",
					e1.getMessage());
			sess().setMessageErreur(e1.getMessage());
			e1.printStackTrace();
			throw e1;
		}
	}
	
	public void leTotal(){
		setDg(wocomponent().getEtudiantActif());
		if (dg().allObjects().isEmpty()) {
			dg().setObjectArray(new NSArray(sess().getEtudiant()));
			dg().queryBindings().setObjectForKey(sess().getEtudiant().primaryKey(),"numero");
		}
		setBdgs(dg().queryBindings());
		try {
		//ProcessEtudiant.selectEtudiants(sess.dataBus(), sess.getEtudiant());
			NSMutableArray totalList = new NSMutableArray();
			totalList = reWriteListDico(ProcessGestionTotal.selectRawRowTotal(edc(), bdgs()));
		wocomponent().setListTotal(totalList.immutableClone());
		} catch (FactoryException e) {
			String alertMessage = e.getMessageFormatte();
			if (e.isBloquant()) {
				if (e.isInformatif()) {
					// Exception contenant un message d'information pour
					// l'utilisateur
					sess().addSimpleErrorMessage(
							"message d'information pour l'utilisateur",
							alertMessage);
					sess().setMessageErreur(alertMessage);
				} else {
					e.printStackTrace();
					throw e;
				}
			} else {
				sess().addSimpleErrorMessage("FactoryException ",
						alertMessage);
				sess().setMessageErreur(alertMessage);
			}

		} catch (RuntimeException e1) {
			sess().addSimpleErrorMessage("RuntimeException ",
					e1.getMessage());
			sess().setMessageErreur(e1.getMessage());
			e1.printStackTrace();
			throw e1;
		}
	}
	
	public void lesTotaux(){
		setDg(wocomponent().getEtudiantActif());
		if (dg().allObjects().isEmpty()) {
			dg().setObjectArray(new NSArray(sess().getEtudiant()));
			dg().queryBindings().setObjectForKey(sess().getEtudiant().primaryKey(),"numero");
		}
		setBdgs(dg().queryBindings());
		try {
		//ProcessEtudiant.selectEtudiants(sess.dataBus(), sess.getEtudiant());
			NSMutableArray totauxList = new NSMutableArray();
			totauxList = reWriteListDico(ProcessGestionTotaux.selectRawRowTotaux(edc(), bdgs()));
		wocomponent().setListTotaux(totauxList.immutableClone());
		} catch (FactoryException e) {
			String alertMessage = e.getMessageFormatte();
			if (e.isBloquant()) {
				if (e.isInformatif()) {
					// Exception contenant un message d'information pour
					// l'utilisateur
					sess().addSimpleErrorMessage(
							"message d'information pour l'utilisateur",
							alertMessage);
					sess().setMessageErreur(alertMessage);
				} else {
					e.printStackTrace();
					throw e;
				}
			} else {
				sess().addSimpleErrorMessage("FactoryException ",
						alertMessage);
				sess().setMessageErreur(alertMessage);
			}

		} catch (RuntimeException e1) {
			sess().addSimpleErrorMessage("RuntimeException ",
					e1.getMessage());
			sess().setMessageErreur(e1.getMessage());
			e1.printStackTrace();
			throw e1;
		}
	}
	
	protected void querry(NSArray list){
		for(int i=0; i<list.count();i++){
			dg().queryBindings().setObjectForKey(list.objectAtIndex(i),"diplome"+i);
		}
	}
	//End display profil pdf
	//Dictionnary Null value decoder
		protected NSMutableArray reWriteListDico(NSArray dicoList){
			NSMutableArray  listDico = new NSMutableArray();
			for(int j=0; j < dicoList.count(); j++){
				NSMutableDictionary tinyDico = new NSMutableDictionary();
				tinyDico = (NSMutableDictionary) dicoList.objectAtIndex(j);
				reWriteDico(tinyDico);
				listDico.addObject(tinyDico);
			}
			return listDico;
		}
		
		protected void reWriteDico (NSMutableDictionary dico){
			for(int i=0;i<dico.size();i++){
				Object value = dico.allValues().objectAtIndex(i);
				if(value.equals(NSKeyValueCoding.NullValue)){
					String key = (String) dico.allKeys().objectAtIndex(i);
					dico.setObjectForKey("",key);
					//NSLog.out.appendln(dico);
				}
			}
		}
		
		protected String decode(Object obj) {
			String key = obj.toString().substring(1);
			String key2 = key.substring(0, key.length()-1);
			String decodedValue = key2.substring(key2.length()-4);
			if (decodedValue.equals("Null")) {
				return null;
			} else {
				return obj.toString();
			}
		}
		//End Decoder

}
